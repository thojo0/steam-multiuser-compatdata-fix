#!/bin/bash

# Dynamically sets up Steam compatdata bind mounts for external libraries.

# Exit on error, unset variable, or pipe failure
set -euo pipefail

# Logger tag for syslog entries
readonly LOGGER_TAG="steamlibrary.init"
# Dummy mount point path (MUST exactly match the 'polydir' in namespace.conf!)
readonly DUMMY_POLYDIR="/opt/pam_namespace_steamlibrarytrigger"

log() {
    logger -t "$LOGGER_TAG" -p "user.${1}" -- "${2}"
}

# If the triggering polydir ($1) is not the one we expect for Steam setup, exit now.
if [ "$1" != "$DUMMY_POLYDIR" ]; then
    log debug "Polydir '$1' does not match expected Steam trigger '$DUMMY_POLYDIR'. No action needed. Exiting."
    exit 0 # Successful exit, just not relevant for this script's main purpose
fi

# --- Determine User and Home Directory ---
readonly user="$4"
readonly homedir=$(getent passwd "$user" | cut -f6 -d":")
if [ -z "$homedir" ] || ! [ -d "$homedir" ]; then
    log err "Home directory invalid or not found for user '$user' (homedir: '$homedir')."
    exit 1
fi

log info "Processing trigger '$1' for user '$user' with home '$homedir'."

# === Discover and Filter Steam Library Paths ===
readonly VDF_FILE="${homedir}/.steam/steam/steamapps/libraryfolders.vdf"
if ! runuser -u "$user" -- test -f "$VDF_FILE"; then
    log info "VDF file '$VDF_FILE' not found for user '$user'. No external libraries to process."
    exit 0
fi

# The single source directory within the user's home to mount everywhere else
readonly USER_SOURCE_DIR="${homedir}/.steam/steam/steamapps/compatdata"
if ! [ -d "$USER_SOURCE_DIR" ]; then
    log warn "Source directory '$USER_SOURCE_DIR' does not exist for user '$user'. No mounts performed."
    exit 0
fi

log debug "Parsing VDF file '$VDF_FILE' for user '$user'."
declare -a VALID_TARGET_POLYDIRS=() # Array to hold final target mount points
# Process library base paths
runuser -u "$user" -- bash -c "grep '\"path\"' '$VDF_FILE' 2>/dev/null" |
    cut -d'"' -f4 | grep -v "^${homedir}" |
    while IFS="" read -r lib_path || [ -n "$lib_path" ]; do
        if [[ "$lib_path" != /* ]]; then
            log warn "Skipping non-absolute library path: '$lib_path'"
            continue
        fi
        full_target_path="${lib_path}/steamapps/compatdata"
        log debug "Found valid external target path: '$full_target_path'"
        VALID_TARGET_POLYDIRS+=("$full_target_path")
    done

if [ ${#VALID_TARGET_POLYDIRS[@]} -eq 0 ]; then
    log info "No external (non-HOME) library paths found in VDF for user '$user'."
    exit 0
fi

log debug "Found ${#VALID_TARGET_POLYDIRS[@]} external library path(s)."

# === Perform Bind Mounts ===
# Only attempt mounts if the source directory actually exists
mount_success_count=0
mount_fail_count=0
for target_path in "${VALID_TARGET_POLYDIRS[@]}"; do
    # Check if target mount point directory exists before attempting mount
    if ! [ -d "$target_path" ]; then
        log warn " Target '$target_path' does not exist. Skipping mount."
        ((mount_fail_count++))
        continue
    fi
    # Use direct command success/failure check in 'if'
    if mount --bind "$USER_SOURCE_DIR" "$target_path"; then
        log info "Mounted -> '$target_path'"
        ((mount_success_count++))
    else
        log err " FAILED to mount -> '$target_path' (Code: $?)"
        ((mount_fail_count++))
    fi
done
log info "Mounting finished for '$user'. Success: $mount_success_count, Failed/Skipped: $mount_fail_count."

exit 0
